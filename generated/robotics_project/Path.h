// Generated by gencpp from file robotics_project/Path.msg
// DO NOT EDIT!


#ifndef ROBOTICS_PROJECT_MESSAGE_PATH_H
#define ROBOTICS_PROJECT_MESSAGE_PATH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64MultiArray.h>

namespace robotics_project
{
template <class ContainerAllocator>
struct Path_
{
  typedef Path_<ContainerAllocator> Type;

  Path_()
    : movements()  {
    }
  Path_(const ContainerAllocator& _alloc)
    : movements(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::std_msgs::Float64MultiArray_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::Float64MultiArray_<ContainerAllocator> >> _movements_type;
  _movements_type movements;





  typedef boost::shared_ptr< ::robotics_project::Path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotics_project::Path_<ContainerAllocator> const> ConstPtr;

}; // struct Path_

typedef ::robotics_project::Path_<std::allocator<void> > Path;

typedef boost::shared_ptr< ::robotics_project::Path > PathPtr;
typedef boost::shared_ptr< ::robotics_project::Path const> PathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotics_project::Path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotics_project::Path_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotics_project::Path_<ContainerAllocator1> & lhs, const ::robotics_project::Path_<ContainerAllocator2> & rhs)
{
  return lhs.movements == rhs.movements;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotics_project::Path_<ContainerAllocator1> & lhs, const ::robotics_project::Path_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotics_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotics_project::Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotics_project::Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotics_project::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotics_project::Path_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotics_project::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotics_project::Path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotics_project::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75b6caf88fdba969717707baa1e7c017";
  }

  static const char* value(const ::robotics_project::Path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75b6caf88fdba969ULL;
  static const uint64_t static_value2 = 0x717707baa1e7c017ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotics_project::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotics_project/Path";
  }

  static const char* value(const ::robotics_project::Path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotics_project::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64MultiArray[] movements\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::robotics_project::Path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotics_project::Path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.movements);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotics_project::Path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotics_project::Path_<ContainerAllocator>& v)
  {
    s << indent << "movements[]" << std::endl;
    for (size_t i = 0; i < v.movements.size(); ++i)
    {
      s << indent << "  movements[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.movements[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTICS_PROJECT_MESSAGE_PATH_H
